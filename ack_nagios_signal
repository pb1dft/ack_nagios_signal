#!/usr/bin/env python3

"""
Set vim variables for consistent formatting.

vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4:

Script checked with python3 -m flake8 <script_name>
"""

import argparse  # noqa: E402
import asyncio  # noqa: E402
import base64  # noqa: E402
import json  # noqa: E402
import logging  # noqa: E402
import os  # noqa: E402
import re  # noqa: E402
import smtplib  # noqa: E402
import sys  # noqa: E402
import time  # noqa: E402
import uuid  # noqa: E402
from email.mime.text import MIMEText  # noqa: E402

from config_loader import load_config  # noqa: E402

import daemon  # noqa: E402
from daemon.pidfile import PIDLockFile

import requests  # noqa: E402

import setproctitle  # noqa: E402

from systemd import journal  # noqa: E402

import user_mgmt  # noqa: E402

import group_mgmt  # noqa: 402

import websockets  # noqa: E402

import yaml  # noqa: E402

config = load_config()

WEBSOCKET_URL = f"{config.get('websocket_url')}/{config.get('signal_number')}"
PENDING_USERS_FILE = config['pending_users_file']

GROUP_LOOKUP_URL = f"{config.get('signal_api_url')}/v1/groups/{config.get('signal_number')}"
GROUP_ID_MAP = {}  # Global mapping

# Set program title
setproctitle.setproctitle('ack_nagios_signal')

pid_file = config.get('pid_file')


# --- Setup logger ---
def setup_logger(foreground=False, loglevel_str='INFO', ident='ack_nagios_signal'):
    """Set up and configure the logger based on foreground mode and log level."""
    global VALID_LOG_LEVELS
    loglevel = getattr(logging, loglevel_str.upper(), logging.INFO)
    logger = logging.getLogger(ident)
    logger.handlers.clear()
    logger.setLevel(loglevel)
    logger.propagate = False

    if foreground:
        handler = logging.StreamHandler(sys.stdout)
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        handler.setFormatter(formatter)
    else:
        handler = journal.JournalHandler()
        handler.ident = ident

    handler.setLevel(loglevel)
    logger.addHandler(handler)

    VALID_LOG_LEVELS = sorted(
        [name for name in dir(logging) if name.isupper() and isinstance(getattr(logging, name), int)],
        key=lambda level_name: getattr(logging, level_name)
    )
    logger.info(f'Logger setup to run in {loglevel_str} mode')
    # Get the current log level
    current_level = logger.level

    # Translate the level number back to its name
    level_name = logging.getLevelName(current_level)
    logger.info(f'Live Log level set to {level_name}')
    return logger


def clean_stale_pidfile(pidfile):
    """Clean pidfile."""
    if not os.path.exists(pidfile):
        return

    try:
        with open(pidfile, 'r') as f:
            pid = int(f.read().strip())

        # Check if process exists
        os.kill(pid, 0)
        print(f'‚ùå Daemon already running with PID {pid}')
        exit(1)
    except ProcessLookupError:
        # Process not running, remove stale PID file
        print(f'‚ö†Ô∏è Stale PID file found for PID {pid}. Removing.')
        os.remove(pidfile)
    except Exception as e:
        print(f'‚ùå Could not read or remove PID file: {e}')
        exit(1)


def update_group_id_map_once():
    """We need a group mapping to match group id's from messages and being able to reply to them."""
    global GROUP_ID_MAP
    try:
        logger.info('üîÑ Updating group ID map...')
        resp = requests.get(GROUP_LOOKUP_URL)
        resp.raise_for_status()
        groups = resp.json()

        updated_map = {}
        for group in groups:
            group_id = group.get('id')
            internal_id = group.get('internal_id')
            name = group.get('name')
            if group_id and internal_id:
                updated_map[internal_id] = {
                    'id': group_id,
                    'name': name
                }

        GROUP_ID_MAP = updated_map
        logger.info(f'‚úÖ Group ID map updated: {len(GROUP_ID_MAP)} entries.')
    except Exception as e:
        logger.info(f'‚ùå Failed to update group map: {e}')


async def update_group_id_map(interval=3600):
    """Continuously update the group ID map at specified intervals."""
    while True:
        update_group_id_map_once()
        await asyncio.sleep(interval)


def is_valid_uuid(val):
    """Check whether the provided value is a valid UUID."""
    try:
        uuid.UUID(val.strip())
        return True
    except ValueError as e:
        logger.error(f'UUID check error: {e}')
        return False


def is_valid_group_id(input_str):
    """Validate whether the input string matches the expected group ID pattern."""
    id_pattern = re.compile(r'^[A-Za-z0-9+/]{43}=$')
    return bool(id_pattern.fullmatch(input_str))


def reload_config():
    """Reload global configuration variables."""
    global logger, GROUP_LOOKUP_URL, GROUP_ID_MAP
    config = load_config()

    # Update GROUP_ID_MAP
    update_group_id_map_once()

    # Reset logging level to match config (disabled this breaks command line argument --loglevel)
    # logger.setLevel(getattr(logging, config.get('log_level', 'INFO').upper(), logging.INFO))
    return 'üõ†Ô∏è Config reloaded succesfully', config


async def send_alert_email(subject: str, body: str):
    """Send alert email if connection failed for too long."""
    try:
        smtp_server = config.get('smtp_server', 'localhost')
        smtp_port = config.get('smtp_port', 25)
        from_addr = config.get('alert_email_from')
        to_addr = config.get('alert_email_to')

        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = from_addr
        msg['To'] = to_addr

        with smtplib.SMTP(smtp_server, smtp_port) as server:
            server.sendmail(from_addr, [to_addr], msg.as_string())
        logger.info(f'üìß Alert email sent to {to_addr}')
    except Exception as e:
        logger.error(f'‚ùó Failed to send alert email: {e}')


def send_signal_message(reply_text, envelope):
    """Send a reply message through Signal using the provided envelope."""

    use_auth = config.get('signal_api_use_auth', False)
    user = config.get('signal_api_user')
    password = config.get('signal_api_password')

    headers = {'Content-Type': 'application/json'}
    payload = {
        'message': reply_text,
        'number': config.get('signal_number')
    }

    # Check if this was a group message
    group_id = (
        envelope.get('dataMessage', {}).get('groupInfo', {}).get('groupId') or envelope.get('syncMessage', {}).get('sentMessage', {}).get('groupInfo', {}).get('groupId')
    )

    if group_id:
        payload['recipients'] = [GROUP_ID_MAP[group_id]['id']]
        group_name = GROUP_ID_MAP[group_id]['name']
        logger.info(f'üì§ Sending group message to group: {group_name} ({group_id})')
    else:
        recipient = envelope.get('sourceUuid')
        if recipient:
            payload['recipients'] = [recipient]
            logger.info(f'üì§ Sending direct message to: {recipient}')
        else:
            logger.info('‚ö†Ô∏è No valid recipient found.')
            return

    try:
        auth = (user, password) if use_auth else None
        response = requests.post(f"{config.get('signal_api_url')}/v2/send", headers=headers, data=json.dumps(payload), auth=auth)
        response.raise_for_status()
        logger.debug(f'‚úÖ Message sent: {reply_text}')
    except requests.exceptions.RequestException as e:
        logger.info(f'‚ùå Failed to send message: {e}')


def handle_ack_message(envelope):
    """Handle and acknowledge an incoming Signal message."""
    sent_msg = envelope.get('dataMessage', {}) or envelope.get('syncMessage', {}).get('sentMessage', {})
    quote = sent_msg.get('quote', {})
    quoted_text = quote.get('text', '')
    user = envelope.get('sourceName', 'Unknown')
    ack_message = sent_msg.get('message', '')

    # comment = re.sub(r'^!ack\s*', '', ack_message).strip()
    comment = re.sub(r'^!ack\s*', '', ack_message).strip() or 'Reason not given'

    logger.info(f'Comment given is =={comment}==')
    # Check for host/service pattern
    svc_match = re.search(r'^[^\w]*([\w\.\-]+)/([\w\.\-\s]+):', quoted_text)
    host_match = re.search(r' ([A-Za-z0-9\.\-\s]+) \((([0-9]{1,3}\.){3}[0-9]{1,3})\):', quoted_text)

    try:
        if svc_match:
            host = svc_match.group(1)
            service = svc_match.group(2)
            msg = f'[{int(time.time())}] ACKNOWLEDGE_SVC_PROBLEM;{host};{service};2;1;0;{user};{comment}\n'
            # logger.info(f'‚úîÔ∏è  {user} acknowledged service issue: {host} / {service}')

        elif host_match:
            host = host_match.group(1)
            ip = host_match.group(2)
            msg = f'[{int(time.time())}] ACKNOWLEDGE_HOST_PROBLEM;{host};1;1;0;{user};{comment}\n'
            # logger.info('‚úîÔ∏è  {user} acknowledged host issue: {host} ({ip})')

        else:
            send_signal_message('‚ùå Failed to recognize host/service in quoted message.', envelope)
            logger.error('‚ùå Failed to recognize host/service in quoted message.')
            return

        with open(config.get('nagios_cmd_file'), 'w') as file:
            file.write(msg)

        # Optional confirmation message
        # smsg = f"üîï {host} {'/ ' + service if svc_match else ' (' + ip + ')'}:\nAcknowledged by: {user}\n{comment}"
        logger.info(f"üîï {host} {'/ ' + service if svc_match else ' (' + ip + ')'}:\nAcknowledged by: {user}\n{comment}")
        # No need to send signal message as that is handled by nagios through notify
        # send_signal_message(smsg, envelope)

    except Exception as e:
        logger.error(f'ACK failed: {e}')
        send_signal_message('‚ùå Failed to process ACK command.', envelope)


def check_notification_status(envelope):
    """Check and log the status of a received notification."""
    name = envelope.get('sourceName', 'Unknown')
    status_file = config.get('nagios_status_file', '/var/spool/nagios/status.dat')
    notifications_enabled = None

    try:
        with open(status_file, 'r') as f:
            in_program_block = False
            for line in f:
                line = line.strip()
                if line == 'programstatus {':
                    in_program_block = True
                elif line == '}':
                    if in_program_block:
                        break
                    continue
                elif in_program_block and line.startswith('enable_notifications='):
                    value = line.split('=')[1].strip()
                    notifications_enabled = (value == '1')
                    break
    except Exception as e:
        logger.error(f'‚ùå Failed to read status file: {e}')
        send_signal_message(f'‚ùå {name}, failed to check notification status: {e}', envelope)
        return

    if notifications_enabled is True:
        send_signal_message('‚úÖ Notifications are currently *ENABLED*', envelope)
    elif notifications_enabled is False:
        send_signal_message('‚ö†Ô∏è  Notifications are currently *DISABLED*', envelope)
    else:
        send_signal_message('‚ùì Unable to determine notification status.', envelope)


def on_command(argument: str, envelope):
    """Handle the 'on' command from a Signal message."""
    name = envelope.get('sourceName', 'Unknown')
    logger.info(f'‚úÖ Triggered !on command from {name} with argument: {argument}')
    msg = '[' + str(int(time.time())) + '] ENABLE_NOTIFICATIONS;' + str(int(time.time())) + '\n'
    file = open(config.get('nagios_cmd_file'), 'w')
    file.write(msg)
    file.close()
    send_signal_message(f'‚úÖ {name} turned on notifications', envelope)


def off_command(argument: str, envelope):
    """Handle the 'off' command from a Signal message."""
    name = envelope.get('sourceName', 'Unknown')
    logger.info(f'‚ùå Triggered !off command from {name} with argument: {argument}')
    msg = '[' + str(int(time.time())) + '] DISABLE_NOTIFICATIONS;' + str(int(time.time())) + '\n'
    file = open(config.get('nagios_cmd_file'), 'w')
    file.write(msg)
    file.close()
    send_signal_message(f'‚ùå {name} turned off notifications', envelope)


def handle_chatinfo_command(envelope):
    """Handle the 'chatinfo' command and reply with metadata about the chat."""
    sent_msg = envelope.get('dataMessage', {}) or envelope.get('syncMessage', {}).get('sentMessage', {})

    group_info = sent_msg.get('groupInfo', {})
    group_name = group_info.get('groupName', 'Unknown')
    group_id = group_info.get('groupId')
    internal_group_id = GROUP_ID_MAP.get(group_id, {}).get('id', 'Unknown')
    allowed_groups = config.get('allowed_groups')
    pending_groups_file = config.get('pending_groups_file')

    new_group = {
        'name': group_name,
        'int_id': internal_group_id,
        'id': group_id
    }

    if not group_id:
        send_signal_message('‚ÑπÔ∏è This command must be run from within a group chat.', envelope)
        return

    # Load existing pending users
    if os.path.exists(pending_groups_file):
        with open(pending_groups_file, 'r') as f:
            data = yaml.safe_load(f) or {}
    else:
        data = {}

    pending = data.get('pending_groups', [])

    # Check if the group is already pending
    if not any(group['int_id'] == internal_group_id for group in pending) \
            and not any(group['int_id'] == internal_group_id for group in allowed_groups) \
            and config['dynamic_group_management']:
        logger.info(f'üÜï New group requested access via !chatinfo:\n  Name: {group_name}\n  ID: {group_id}\n  Internal ID: {internal_group_id}')
        pending.append(new_group)

        with open(pending_groups_file, 'w') as f:
            yaml.dump({'pending_groups': pending}, f)
    else:
        logger.debug(data)
        logger.info(f'üìå Group already pending: {group_name} ({id})')

    reply = f'üë• Group Info:\nGroup Name: {group_name}\nGroup ID: {group_id}\nInternal ID: {internal_group_id}'
    send_signal_message(reply, envelope)


def info_command(envelope):
    """Handle the 'info' command and return basic sender information."""
    name = envelope.get('sourceName', 'Unknown')
    number = envelope.get('sourceNumber', 'Unknown')
    new_uuid = envelope.get('sourceUuid', 'Unknown')
    allowed_senders = config.get('allowed_senders')
    pending_users_file = config.get('pending_users_file')
    new_user = {
        'name': name,
        'uuid': new_uuid,
        'number': number
    }

    # Load existing pending users
    if os.path.exists(pending_users_file):
        with open(pending_users_file, 'r') as f:
            data = yaml.safe_load(f) or {}
    else:
        data = {}

    pending = data.get('pending_users', [])

    # Check if the user is already pending
    if not any(user['uuid'] == new_uuid for user in pending) and not any(user['uuid'] == new_uuid for user in allowed_senders) and config['dynamic_user_management']:
        logger.info(f'üÜï New user requested access via !info:\n  Name: {name}\n  UUID: {new_uuid}\n  Number: {number}')
        pending.append(new_user)

        with open(pending_users_file, 'w') as f:
            yaml.dump({'pending_users': pending}, f)
    else:
        logger.debug(data)
        logger.info(f'üìå User already pending: {name} ({new_uuid})')

    response = (
        f'üìá Info:\n'
        f'Name: {name}\n'
        f'Number: {number}\n'
        f'UUID: {new_uuid}'
    )
    send_signal_message(response, envelope)


def help_command(envelope):
    """Handle the 'help' command and return available commands."""
    response_lines = []

    if config.get('dynamic_group_management', True):
        response_lines = [
            '\nüë• Group related commands',
            '!chatinfo\t\t\t\t\t\t\tWill show the current groups info and add a request to the pending groups lists',
            '!list_groups\t\t\t\t\t\tList current groups that we accept commands in.',
            '!pending_groups\t\t\tList pending groupss waiting for approval',
            '!truncate_groups\t\t\tEmpty pending groups list',
            '!approve_groups <int>\tApprove the group listed under number <int>',
            '!remove_groups <id>\t\tRemove a group from the allowed list',
        ] + response_lines

    if config.get('dynamic_user_management', True):
        response_lines = [
            '\nüë§ User related commands',
            '!info\t\t\t\t\t\t\t\t\tWill show your userinfo and add a request to the pending users lists',
            '!list_users\t\t\t\t\t\tList current users that are able to sent commands',
            '!pending_users\t\t\t\tList pending users waiting for approval',
            '!truncate_users\t\t\t\tEmpty pending users list',
            '!approve_user <int>\t\tApprove the user listed under number <int>',
            '!remove_user <uuid>\t\tRemove a user from the allowed list',
        ] + response_lines

    response_lines = [
        'üñ•Ô∏è Nagios related commands',
        '!off <reason>\t\tWill turn off nagios notifications',
        '!on <reason>\t\tWill turn on nagios notifications',
        '!status\t\t\tWill check current notification status',
        '\nTo acknowledge a nagios alert reply to the alert message with:',
        '!ack <comment>',
        '\nüß© Various commands:',
        '‚ùì !help\t\t\t\t\t\t\tShow this help',
        'üìú !loglevel <level>\t\tTemporary change loglevel',
        'üîÑ !reload\t\t\t\t\t\tReload config from disk'
    ] + response_lines

    response = '\n'.join(response_lines)
    logger.info('Sending help to channel or user')
    send_signal_message(response, envelope)


def is_allowed(msg):
    """Check if sender or group belongs to the allow list."""
    envelope = msg.get('envelope', {})
    data_message = envelope.get('dataMessage', {})
    sync_message = envelope.get('syncMessage', {})

    logger.debug('üì© New message received:')
    logger.debug(json.dumps(msg, indent=2))

    allowed_senders = config.get('allowed_senders')
    allowed_groups = config.get('allowed_groups')

    # üö´ Filter out delivery/read/view receipts
    if 'receiptMessage' in envelope:
        return False, True, False
    if 'typingMessage' in envelope:
        return False, False, True
    if 'readMessages' in sync_message:
        return False, False, True

    source = envelope.get('source')
    source_uuid = envelope.get('sourceUuid')
    message_text = data_message.get('message') or sync_message.get('sentMessage', {}).get('message', '')
    group_id = sync_message.get('sentMessage', {}).get('groupInfo', {}).get('groupId')  # Adjust based on your actual message schema

    # ‚úÖ Always allow !info command, regardless of sender/group
    if (message_text or '').strip().lower().startswith('!info'):
        return True, False, False

    # Check group membership (if group_id exists, check allowed_groups)
    if group_id and allowed_groups and config.get('group_lock'):
        allowed = False
        for group in allowed_groups:
            if group.get('id') == group_id:
                allowed = True
                break
        if not allowed:
            logger.debug(f'Group {group_id} not in allowed groups, ignoring message')
            return False, False, False

    if not allowed_senders:
        logger.info('‚ùå No Allowed users set, allowing all commands.')
        return True, False, False

    for user in allowed_senders:
        if (
            user.get('number') == source or user.get('uuid') == source_uuid
        ):
            return True, False, False

    return False, False, False


def handle_command(msg):
    """Handle various commands."""
    global config
    envelope = msg.get('envelope', {})

    # Check message type
    data_message = envelope.get('dataMessage', {})
    sync_message = envelope.get('syncMessage', {}).get('sentMessage', {})

    # Prefer dataMessage, fallback to syncMessage
    message_text = data_message.get('message') or sync_message.get('message')

    # Command detection
    if (message_text or '').startswith('!on'):
        argument = message_text[4:].strip()
        if argument:
            on_command(argument, envelope)
        else:
            send_signal_message('!on command needs an reason', envelope)
            logger.error('‚ö†Ô∏è No argument provided with !on command.')

    elif (message_text or '').startswith('!off'):
        argument = message_text[4:].strip()
        if argument:
            off_command(argument, envelope)
        else:
            send_signal_message('!off command needs an reason', envelope)
            logger.error('‚ö†Ô∏è No argument provided with !off command.')

    elif (message_text or '').startswith('!status'):
        check_notification_status(envelope)

    elif (message_text or '').startswith('!help'):
        help_command(envelope)

    elif (message_text or '').startswith('!info'):
        info_command(envelope)

    elif (message_text or '').startswith('!chatinfo'):
        handle_chatinfo_command(envelope)

    elif (message_text or '').startswith('!reload'):
        response, config = reload_config()
        send_signal_message(response, envelope)

    elif (message_text or '').startswith('!loglevel'):
        parts = message_text.strip().split()
        if len(parts) == 2:
            level = parts[1].strip().upper()
            if level in VALID_LOG_LEVELS:
                logger.setLevel(getattr(logging, level))
                response = f'üìú Loglevel set to: {level}'
            else:
                allowed = ', '.join(VALID_LOG_LEVELS)
                response = f'‚ùå Invalid loglevel supplied. Allowed values: {allowed}'
        else:
            response = '‚ö†Ô∏è Usage: !loglevel <level>'
        send_signal_message(response, envelope)

    # User part commands
    elif (message_text or '').startswith('!pending_users'):
        if not config['dynamic_user_management']:
            send_signal_message('‚ùå Dynamic user management disabled', envelope)
            return
        response = user_mgmt.handle_pending_command(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!truncate_users'):
        if not config['dynamic_user_management']:
            send_signal_message('‚ùå Dynamic user management disabled', envelope)
            return
        response = user_mgmt.handle_truncate_users_command(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!list_users'):
        response = user_mgmt.list_allowed_users(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!remove_user'):
        if not config['dynamic_user_management']:
            send_signal_message('‚ùå Dynamic user management disabled', envelope)
            return
        parts = message_text.strip().split()
        if len(parts) == 2 and is_valid_uuid(parts[1]):
            uuid = parts[1].strip()
            response, config = user_mgmt.handle_remove_command(uuid, config)
        else:
            response = '‚ö†Ô∏è Usage: !remove_user <uuid>'
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!ack'):
        handle_ack_message(envelope)
    elif (message_text or '').startswith('!approve_user'):
        if not config['dynamic_user_management']:
            send_signal_message('‚ùå Dynamic user management disabled', envelope)
            return
        parts = message_text.strip().split()
        if len(parts) == 2 and parts[1].isdigit():
            index = int(parts[1])
            response, config = user_mgmt.handle_approve_command(index, config)
        else:
            response = '‚ö†Ô∏è Usage: !approve_user <number>'
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!pending_groups'):
        if not config['dynamic_group_management']:
            send_signal_message('‚ùå Dynamic group management disabled', envelope)
            return
        response = group_mgmt.handle_pending_command(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!truncate_groups'):
        if not config['dynamic_group_management']:
            send_signal_message('‚ùå Dynamic group management disabled', envelope)
            return
        response = group_mgmt.handle_truncate_groups_command(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!approve_group'):
        if not config['dynamic_group_management']:
            send_signal_message('‚ùå Dynamic group management disabled', envelope)
            return
        parts = message_text.strip().split()
        if len(parts) == 2 and parts[1].isdigit():
            index = int(parts[1])
            response, config = group_mgmt.handle_approve_command(index, config)
        else:
            response = '‚ö†Ô∏è Usage: !approve_group <number>'
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!list_groups'):
        response = group_mgmt.list_allowed_groups(config)
        send_signal_message(response, envelope)
    elif (message_text or '').startswith('!remove_group'):
        if not config['dynamic_group_management']:
            send_signal_message('‚ùå Dynamic group management disabled', envelope)
            return
        parts = message_text.strip().split()
        if len(parts) == 2 and is_valid_group_id(parts[1]):
            ext_id = parts[1].strip()
            response, config = group_mgmt.handle_remove_command(ext_id, config)
        else:
            response = '‚ö†Ô∏è Usage: !remove_group <id>'
        send_signal_message(response, envelope)
    else:
        logger.info('üì® Regular message, no command to handle.')


async def receive_messages():
    """Receive messages from the websocket."""
    reconnect_timeout = config.get('reconnect_alert_timeout', 300)  # seconds before alert
    reconnect_delay = 1  # initial reconnect delay
    total_down_time = 0  # total time spent trying to reconnect
    alert_sent = False  # track if 'down' alert has been sent
    while True:
        try:
            logger.info('üîå Connecting to Signal WebSocket...')

            reload_config()  # Make sure all config vars are reloaded

            websocket_url = f"{config.get('websocket_url')}/{config.get('signal_number')}"
            use_auth = config.get('signal_api_use_auth', False)
            user = config.get('signal_api_user')
            password = config.get('signal_api_password')

            headers = {}

            if use_auth and user and password:
                credentials = f'{user}:{password}'
                encoded_credentials = base64.b64encode(credentials.encode()).decode()
                headers['Authorization'] = f'Basic {encoded_credentials}'

            async with websockets.connect(websocket_url, extra_headers=headers ) as websocket:
                logger.info(f"‚úÖ Connected. Listening for Signal messages on {config.get('signal_number')}...")

                if alert_sent:
                    # Bot recovered, send recovery email
                    subject = '‚úÖ Signal Bot Recovered'
                    body = 'Signal bot successfully reconnected and is back online.'
                    await send_alert_email(subject, body)
                    alert_sent = False  # Reset alert status
                    logger.info('‚úÖ Recovery email sent.')

                total_down_time = 0  # Reset downtime
                reconnect_delay = 1  # Reset delay

                while True:
                    try:
                        data = await websocket.recv()
                        msg = json.loads(data)

                        allowed, is_receipt, is_typing = is_allowed(msg)

                        if allowed:
                            handle_command(msg)
                        elif is_receipt or is_typing:
                            continue
                        else:
                            logger.info('‚õî Ignored message from unknown sender or group.')

                    except websockets.ConnectionClosed:
                        logger.warning('‚ö° WebSocket connection lost inside recv. Reconnecting...')
                        break

                    except json.JSONDecodeError as e:
                        logger.info(f'‚ùó JSON error: {e}')
                    except Exception as e:
                        logger.error(f'‚ùó Error while receiving message: {e}')
                        break

        except Exception as e:
            logger.error(f'‚ùó Unexpected error during connection setup: {e}')

        logger.info(f'üîÅ Reconnecting in {reconnect_delay}s...')
        await asyncio.sleep(reconnect_delay)
        total_down_time += reconnect_delay

        reconnect_delay = min(reconnect_delay * 2, 30)  # Backoff

        if total_down_time >= reconnect_timeout and not alert_sent:
            logger.warning(f'‚ö†Ô∏è Unable to reconnect for {total_down_time} seconds. Sending down alert email.')
            subject = '‚ùå Signal Bot DOWN'
            body = f'Signal bot could not reconnect for {total_down_time} seconds.\nPlease check the server or container.'
            await send_alert_email(subject, body)
            alert_sent = True  # Avoid multiple alerts until recovered


async def main():
    """Start main script runner."""
    asyncio.create_task(update_group_id_map())  # Create group updater
    await receive_messages()  # Create websocket listener


def run(args):
    """Wrap the async main() into a sync function."""
    global logger

    logger = setup_logger(foreground=args.foreground, loglevel_str=args.loglevel)
    logger.info(f'Starting async daemon ({args.loglevel})')
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception('Daemon crashed: %s', str(e))
    finally:
        logger.info('Daemon exiting')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--foreground', action='store_true', help='Run in foreground')
    parser.add_argument('--loglevel', default='INFO', help='Log level (DEBUG, INFO, WARNING, ERROR)')
    args, unknown = parser.parse_known_args()

    if unknown:
        print(f"‚ùå Unknown arguments: {' '.join(unknown)}\n")
        parser.print_help()
        sys.exit(1)

    try:
        if args.foreground:
            print('üöÄ Running in foreground mode')
            run(args)
        else:
            # sys.stdout.flush()
            # sys.stderr.flush()
            # with open(os.devnull, 'w') as devnull:
            #     os.dup2(devnull.fileno(), sys.stdout.fileno())
            #     os.dup2(devnull.fileno(), sys.stderr.fileno())
            try:
                clean_stale_pidfile(pid_file)
                print('Starting daemon')
                with daemon.DaemonContext(
                    pidfile=PIDLockFile(pid_file),
                    stdout=open('/var/log/ack_nagios_signal.log', 'a+'),
                    stderr=open('/var/log/ack_nagios_signal.log', 'a+'),
                ):
                    run(args)
            except Exception as e:
                print(e)
    except KeyboardInterrupt:
        print('\nüëã Caught KeyboardInterrupt. Exiting...')
        sys.exit(0)
